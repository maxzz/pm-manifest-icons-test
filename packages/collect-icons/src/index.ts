import fg from 'fast-glob';
import { Plugin } from 'vite';
import path from 'path';
import fs from 'fs/promises';

export interface CollectIconsOptions {
  srcDir?: string; // absolute or relative to process.cwd()
  outFile?: string; // output TypeScript file path (will be created)
}

function extractNames(contents: string): string[] {
  const names = new Set<string>();
  const simpleRe = /export\s+(?:function|const|let|var|class)\s+([A-Za-z$_][A-Za-z0-9$_]*)/g;
  let m: RegExpExecArray | null;
  while ((m = simpleRe.exec(contents))) {
    const n = m[1];
    if (n.startsWith('SvgSymbol') || n.startsWith('Symbol')) names.add(n);
  }

  const namedExportRe = /export\s*{([^}]+)}/g;
  while ((m = namedExportRe.exec(contents))) {
    const list = m[1].split(',').map(s => s.split('as')[0].trim());
    for (const item of list) {
      if (item && (item.startsWith('SvgSymbol') || item.startsWith('Symbol'))) names.add(item);
    }
  }

  return Array.from(names);
}
export async function collectIcons(opts: CollectIconsOptions = {}) {
  const srcDir = opts.srcDir || 'packages/app/src/components/ui/icons/symbols/all-other';
  const outFile = opts.outFile || 'packages/collect-icons/generated/collected-icons.ts';

  const base = path.isAbsolute(srcDir) ? srcDir : path.resolve(process.cwd(), srcDir);
  const entries = await fg(['**/*.{tsx,ts,jsx,js,svg}'], { cwd: base, absolute: true });

  const dest = path.isAbsolute(outFile) ? outFile : path.resolve(process.cwd(), outFile);
  const destDir = path.dirname(dest);
  await fs.mkdir(destDir, { recursive: true });

  const groups: Record<string, string[]> = {};
  const allNames: string[] = [];

  for (const file of entries) {
    const contents = await fs.readFile(file, 'utf8');
    const names = extractNames(contents);
    if (names.length === 0) continue;

    const relImportPath = path.relative(destDir, file).replace(/\\+/g, '/').replace(/\.(tsx|ts|jsx|js|svg)$/, '');
    const importPath = relImportPath.startsWith('.') ? relImportPath : './' + relImportPath;
    groups[importPath] = groups[importPath] || [];
    groups[importPath].push(...names);
    allNames.push(...names);
  }

  // deduplicate names
  const uniqueNames = Array.from(new Set(allNames)).sort();

  // generate TS file that re-exports symbols and provides a names array + union type
  const lines: string[] = [];
  lines.push('// Auto-generated by vite-plugin-collect-icons. Do not edit.');
  lines.push('/* eslint-disable */');
  lines.push('');
  // re-exports
  for (const [importPath, names] of Object.entries(groups)) {
    const unique = Array.from(new Set(names)).sort();
    lines.push(`export { ${unique.join(', ')} } from '${importPath}';`);
  }
  lines.push('');
  // names array and type
  lines.push(`export const collectedIconNames = [${uniqueNames.map(n => `'${n}'`).join(', ')}] as const;`);
  lines.push('export type CollectedIconName = typeof collectedIconNames[number];');

  await fs.writeFile(dest, lines.join('\n'), 'utf8');
  console.warn(`Collected ${uniqueNames.length} icon names to ${dest}`);

  return { dest, names: uniqueNames };
}

export default function collectIconsPlugin(opts: CollectIconsOptions = {}): Plugin {
  return {
    name: 'vite-plugin-collect-icons',
    apply: 'build',
    async buildStart() {
      await collectIcons(opts);
    }
  };
}
